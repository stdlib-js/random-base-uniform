{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/uniform.js","../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport isnan from '@stdlib/assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Validates values provided for minimum and maximum support.\n*\n* @private\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( a, b ) {\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( a >= b ) {\n\t\treturn new RangeError( format( 'invalid argument. Minimum support must be less than maximum support. Value: `[%f, %f]`.', a, b ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.\n*\n* @private\n* @param {PRNG} rand - pseudorandom number generator\n* @param {number} a - minimum support (inclusive)\n* @param {number} b - maximum support (exclusive)\n* @returns {number} pseudorandom number\n*/\nfunction uniform( rand, a, b ) {\n\tvar r = rand();\n\treturn ( b*r ) + ( (1.0-r)*a ); // equivalent to (b-a)*r + a\n}\n\n\n// EXPORTS //\n\nexport default uniform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor' ;\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport constantFunction from '@stdlib/utils-constant-function' ;\nimport noop from '@stdlib/utils-noop' ;\nimport { factory as randu } from '@stdlib/random-base-mt19937' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport typedarray2json from '@stdlib/array-to-json' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport validate from './validate.js' ;\nimport uniform0 from './uniform.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating uniformly distributed random numbers.\n*\n* @param {number} [a] - minimum support (inclusive)\n* @param {number} [b] - maximum support (exclusive)\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var uniform = factory( 0.0, 1.0 );\n*\n* var v = uniform();\n* // returns <number>\n*\n* @example\n* var uniform = factory( -3.0, -1.0, {\n*     'seed': 297\n* });\n* var v = uniform();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar a;\n\tvar b;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0PU2h', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( '0PU7M', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\terr = validate( a, b );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( '0PU2h', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0PU7M', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( a === void 0 ) {\n\t\tprng = uniform2;\n\t} else {\n\t\tprng = uniform1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'uniform' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( a === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ a, b ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = uniform1();\n\t* // returns <number>\n\t*/\n\tfunction uniform1() {\n\t\treturn uniform0( rand, a, b );\n\t}\n\n\t/**\n\t* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.\n\t*\n\t* @private\n\t* @param {number} a - minimum support (inclusive)\n\t* @param {number} b - maximum support (exclusive)\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = uniform2( 0.0, 1.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = uniform2( 1.0, 0.0 );\n\t* // returns NaN\n\t*/\n\tfunction uniform2( a, b ) {\n\t\tif (\n\t\t\tisnan( a ) ||\n\t\t\tisnan( b ) ||\n\t\t\ta >= b\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn uniform0( rand, a, b );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.\n*\n* @name uniform\n* @type {PRNG}\n* @param {number} a - minimum support (inclusive)\n* @param {number} b - maximum support (exclusive)\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = uniform( 0.0, 1.0 );\n* // returns <number>\n*/\nvar uniform = factory();\n\n\n// EXPORTS //\n\nexport default uniform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniform distribution pseudorandom numbers.\n*\n* @module @stdlib/random-base-uniform\n*\n* @example\n* import uniform from '@stdlib/random-base-uniform' ;\n*\n* var v = uniform( 0.0, 1.0 );\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-uniform' ;\n* var uniform = factory( -5.0, 5.0, {\n*     'seed': 297\n* });\n*\n* var v = uniform();\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-uniform' ;\n* var uniform = factory({\n*     'seed': 297\n* });\n*\n* var v = uniform( -5.0, 5.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport uniform from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( uniform, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default uniform;\n"],"names":["validate","a","b","isNumber","isnan","TypeError","format","RangeError","uniform","rand","r","factory","opts","prng","err","arguments","length","randu","isObject","hasOwnProp","isFunction","setReadOnly","uniform2","uniform1","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","state","s","out","name","NAME","typedarray2json","params","uniform0","NaN"],"mappings":";;mzCA2CA,SAASA,EAAUC,EAAGC,GACrB,OAAMC,EAAUF,IAAOG,EAAOH,GACtB,IAAII,UAAWC,EAAQ,8EAA+EL,KAExGE,EAAUD,IAAOE,EAAOF,GACtB,IAAIG,UAAWC,EAAQ,+EAAgFJ,IAE1GD,GAAKC,EACF,IAAIK,WAAYD,EAAQ,0FAA2FL,EAAGC,IAEvH,KCxBR,SAASM,EAASC,EAAMR,EAAGC,GAC1B,IAAIQ,EAAID,IACR,OAASP,EAAEQ,GAAS,EAAIA,GAAGT,ECwC5B,SAASU,IACR,IAAIC,EACAH,EACAI,EACAC,EACAb,EACAC,EAEJ,GAA0B,IAArBa,UAAUC,OACdP,EAAOQ,SACD,GAA0B,IAArBF,UAAUC,OAAe,CAEpC,IAAME,EADNN,EAAOG,UAAW,IAEjB,MAAM,IAAIV,UAAWC,EAAQ,QAASM,IAEvC,GAAKO,EAAYP,EAAM,QAAW,CACjC,IAAMQ,EAAYR,EAAKC,MACtB,MAAM,IAAIR,UAAWC,EAAQ,QAAS,OAAQM,EAAKC,OAEpDJ,EAAOG,EAAKC,UAEZJ,EAAOQ,EAAOL,OAET,CAIN,GADAE,EAAMd,EAFNC,EAAIc,UAAW,GACfb,EAAIa,UAAW,IAGd,MAAMD,EAEP,GAAKC,UAAUC,OAAS,EAAI,CAE3B,IAAME,EADNN,EAAOG,UAAW,IAEjB,MAAM,IAAIV,UAAWC,EAAQ,QAASM,IAEvC,GAAKO,EAAYP,EAAM,QAAW,CACjC,IAAMQ,EAAYR,EAAKC,MACtB,MAAM,IAAIR,UAAWC,EAAQ,QAAS,OAAQM,EAAKC,OAEpDJ,EAAOG,EAAKC,UAEZJ,EAAOQ,EAAOL,QAGfH,EAAOQ,IA6BT,OArBAI,EAJCR,OADU,IAANZ,EACGqB,EAEAC,EAEW,OAAQ,WAGtBX,GAAQA,EAAKC,MACjBQ,EAAaR,EAAM,OAAQ,MAC3BQ,EAAaR,EAAM,aAAc,MACjCW,EAAsBX,EAAM,QAASY,EAAkB,MAAQC,GAC/DL,EAAaR,EAAM,cAAe,MAClCQ,EAAaR,EAAM,aAAc,MACjCQ,EAAaR,EAAM,SAAUY,EAAkB,OAC/CJ,EAAaR,EAAM,OAAQJ,KAE3BkB,EAAqBd,EAAM,OAAQe,GACnCD,EAAqBd,EAAM,aAAcgB,GACzCL,EAAsBX,EAAM,QAASiB,EAAUC,GAC/CJ,EAAqBd,EAAM,cAAemB,GAC1CL,EAAqBd,EAAM,aAAcoB,GACzCZ,EAAaR,EAAM,SAAUqB,GAC7Bb,EAAaR,EAAM,OAAQJ,GAC3BA,EAAOA,EAAK0B,YAENtB,EAQP,SAASe,IACR,OAAOnB,EAAK2B,KASb,SAASP,IACR,OAAOpB,EAAK4B,WASb,SAASL,IACR,OAAOvB,EAAK6B,YASb,SAASL,IACR,OAAOxB,EAAK8B,WASb,SAAST,IACR,OAAOrB,EAAK+B,MAUb,SAAST,EAAUU,GAClBhC,EAAK+B,MAAQC,EAad,SAASP,IACR,IAAIQ,EAAM,CACVA,KAAW,QAQX,OAPAA,EAAIC,KAAO9B,EAAK+B,KAChBF,EAAIF,MAAQK,EAAiBpC,EAAK+B,OAEjCE,EAAII,YADM,IAAN7C,EACS,GAEA,CAAEA,EAAGC,GAEZwC,EAaR,SAASnB,IACR,OAAOwB,EAAUtC,EAAMR,EAAGC,GAmB3B,SAASoB,EAAUrB,EAAGC,GACrB,OACCE,EAAOH,IACPG,EAAOF,IACPD,GAAKC,EAEE8C,IAEDD,EAAUtC,EAAMR,EAAGC,ICpOzB,IAACM,EAAUG,ICmBdU,EAAAb,EAAA,UAAAG"}